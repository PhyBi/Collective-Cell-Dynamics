#!/usr/bin/env bash
# Help:Begin
# Brief: Plots the given config using gnuplot.
# Usage: ccd_visual [-t <type>] [-H <index>[@<color>][#]] [-L] [-z [<color0>]:[<color1>]] [<path/file.xy>]
# <type> = png | pdf | eps | svg
# <index> = <m>[{:<n>}[:<p>]] # Highlight cell no. <m> to <n> with stride <p>. To highlight all cells use <index> = 0
# <color> = just name (or #RRGGBB or 0xRRGGBB) of the color you want the highlighted cell to be rendered in
# Provide the optional '#' if you want solid fill
# The '-L' option prints cell numbers at the com of the respective cells
# '-z' option is to be used for plotting heatmaps. <color0> is mapped to min and <color1> to max. Default cyan:magenta.
# Environment Variables: 
# GNUPLOT_PATH - supplies non-default gnuplot installation paths, e.g. path/to/wgnuplot.exe while using WSL in Windows.
# NO_CB - if set, hides colorbox in heatmaps.
# Default xy file: config.xy
# Help:End

# Setting gnuplot alias
gplot="${GNUPLOT_PATH:-$(which gnuplot)}"

# Create tmp files with autoremoval on exit
tmp_plt_script="$(mktemp .tmp.XXXX.plt)" # To hold all the gnuplot commands
tmp_xy_file="$(mktemp -u .tmp.XXXX.xy)" # To hold the datafile for plotting labels: cm_x cm_y cell_id
trap "rm -f ${tmp_plt_script} ${tmp_xy_file}" EXIT

while getopts :H:t:Lz:h opt; do
  case "${opt}" in
    H) 
        OPTARG="${OPTARG,,}" # Convert to lowercase
        IFS='@' read index color <<< "${OPTARG%#}"
        if [[ "${index}" != '0' ]]; then
          index="index ${index}"
        else
          index=''
        fi
        if [[ "${OPTARG: -1}" == '#' ]]; then
          highlighter="filledcurves closed"
        else
          highlighter="line"
        fi
        # Build the plot command through append
        plt_cmd="${plt_cmd}, '' ${index} using 1:2 linecolor '${color:-blue}' with ${highlighter}"
        ;;
    t) 
        output_type="${OPTARG,,}" # Convert to lowercase
        case "${output_type}" in
            png)
                term_cmd="set terminal png size 1080,1080 crop background rgbcolor('white') enhanced font 'arial,14'"
                ;;
            pdf)
                term_cmd="set terminal pdfcairo enhanced size 8.6cm,8.6cm background rgbcolor('white') font 'arial,14'"
                ;;
            eps)
                term_cmd="set terminal postscript eps enhanced size 8.6cm,8.6cm clip nobackground color font 'arial,14'"
                ;;
            svg)
                term_cmd="set terminal svg enhanced size 1080,1080 background rgbcolor('white') font 'arial,14'"
                ;;
            *) 
                echo "Provided output type not supported" >&2
                exit 1
                ;;
        esac
        ;;
    L)
        label='set'
        ;;
    z)
        IFS=':' read hm_clr_0 hm_clr_1 <<< "${OPTARG}"
        heatmap="set palette defined (0 '${hm_clr_0:=cyan}', 1 '${hm_clr_1:=magenta}'); set cbtics; ${NO_CB:+ unset colorbox}"
        plt_cmd="${plt_cmd}, '' using 'x':'y':'z' with filledcurves closed palette" 
        ;;
    h)
        helpdoc ccd_visual
        exit
        ;;
    *) 
        echo "Provided option not supported" >&2
        exit 1
        ;;
  esac
done

# Accessing the first non-option argument, if any, which is supposed to be a (non-default) xy file
xyfile="${!OPTIND:-config.xy}"
echo "Reading config file: ${xyfile}" >&2
[[ -f "${xyfile}" ]] || { echo "Config file not found" >&2; exit 1;}

# If output type is interactive (non-batch mode) then gnuplot must have the --persist option.
if [[ -v output_type ]]; then
    output_file="${xyfile%.xy}.${output_type}"
    echo "Creating output file: ${output_file}" >&2
    term_cmd="${term_cmd}; set output '${output_file}'"
else
    persist='--persist'
fi

# Extract metadata
title="$(grep '#Title:' "${xyfile}" | cut -d ' ' -f 2-)"
box="$(grep '#Box:' "${xyfile}" | awk '{print $2}')"

# If '-l' option is present at command-line, extract ID@COM data into a separate file (to be plotted with labels)
# Also update the plot command accordingly
if [[ -v label ]]; then
  grep ^'#ID@COM' "${xyfile}" | cut -d' ' -f2- > "${tmp_xy_file}"
  plt_cmd="${plt_cmd}, '${tmp_xy_file}' using 1:2:3 with labels"
fi

# Prep the script and execute with gnuplot
cat > "${tmp_plt_script}" << EOF
    ${term_cmd}
    set xrange [0:${box}]
    set yrange [0:${box}]
    set border linewidth 5
    unset tics
    unset key
    set title '${title}'
    ${heatmap}
    #set size square
    plot '${xyfile}' using 'x':'y' with line linecolor black linewidth 3 \
        ${plt_cmd}
    set output
EOF

eval "${gplot}" "${persist}" "${tmp_plt_script}" && echo "Done visualizing ${xyfile}" >&2
